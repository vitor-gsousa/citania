// js/features/pwa-install.js
/**
 * M√≥dulo respons√°vel por gerir a instala√ß√£o da PWA
 * Implementa o prompt de instala√ß√£o personalizado
 */

let deferredPrompt = null;
let installButton = null;

/**
 * Inicializa a funcionalidade de instala√ß√£o da PWA
 */
export function initPWAInstall() {
  // Criar bot√£o de instala√ß√£o (ser√° mostrado quando apropriado)
  createInstallButton();
  
  // Event listener para beforeinstallprompt
  window.addEventListener('beforeinstallprompt', (e) => {
    console.log('üí° Evento beforeinstallprompt disparado');
    
    // Prevenir que o browser mostre o prompt autom√°tico
    e.preventDefault();
    
    // Guardar o evento para usar mais tarde
    deferredPrompt = e;
    
    // Mostrar o bot√£o de instala√ß√£o personalizado
    showInstallButton();
  });

  // Event listener para quando a app √© instalada
  window.addEventListener('appinstalled', () => {
    console.log('‚úÖ PWA foi instalada com sucesso');
    
    // Esconder o bot√£o de instala√ß√£o
    hideInstallButton();
    
    // Limpar a refer√™ncia ao prompt
    deferredPrompt = null;
    
    // Mostrar feedback ao utilizador
    showInstallFeedback();
  });

  // Verificar se a app j√° est√° em modo standalone (instalada)
  if (window.matchMedia('(display-mode: standalone)').matches || 
      window.navigator.standalone === true) {
    console.log('üì± App est√° a correr em modo standalone');
    hideInstallButton();
  }
}

/**
 * Cria o bot√£o de instala√ß√£o da PWA
 */
function createInstallButton() {
  // Verificar se o bot√£o j√° existe
  if (document.getElementById('pwa-install-button')) {
    installButton = document.getElementById('pwa-install-button');
    return;
  }

  // Criar bot√£o de instala√ß√£o
  installButton = document.createElement('button');
  installButton.id = 'pwa-install-button';
  installButton.className = 'pwa-install-btn hidden';
  installButton.innerHTML = `
    <span class="material-symbols-outlined">install_mobile</span>
    <span>Instalar App</span>
  `;
  installButton.title = 'Instalar Cit√¢nia como aplica√ß√£o';
  installButton.setAttribute('aria-label', 'Instalar aplica√ß√£o');
  
  // Event listener para o clique no bot√£o
  installButton.addEventListener('click', handleInstallClick);
  
  // Adicionar o bot√£o ao header (ao lado do bot√£o de tema)
  const header = document.querySelector('.header-inner');
  if (header) {
    // Inserir antes do bot√£o de tema
    const themeButton = document.getElementById('theme-toggle');
    if (themeButton) {
      header.insertBefore(installButton, themeButton);
    } else {
      header.appendChild(installButton);
    }
  }
}

/**
 * Gere o clique no bot√£o de instala√ß√£o
 */
async function handleInstallClick() {
  if (!deferredPrompt) {
    console.warn('‚ö†Ô∏è N√£o h√° prompt de instala√ß√£o dispon√≠vel');
    return;
  }

  // Mostrar o prompt de instala√ß√£o
  deferredPrompt.prompt();
  
  // Aguardar a escolha do utilizador
  const { outcome } = await deferredPrompt.userChoice;
  
  console.log(`üë§ Utilizador ${outcome === 'accepted' ? 'aceitou' : 'rejeitou'} a instala√ß√£o`);
  
  if (outcome === 'accepted') {
    console.log('‚úÖ Utilizador aceitou instalar a PWA');
  } else {
    console.log('‚ùå Utilizador rejeitou a instala√ß√£o');
  }
  
  // Limpar a refer√™ncia ao prompt
  deferredPrompt = null;
  
  // Esconder o bot√£o temporariamente
  hideInstallButton();
}

/**
 * Mostra o bot√£o de instala√ß√£o
 */
function showInstallButton() {
  if (installButton) {
    installButton.classList.remove('hidden');
    console.log('üëÅÔ∏è Bot√£o de instala√ß√£o PWA vis√≠vel');
  }
}

/**
 * Esconde o bot√£o de instala√ß√£o
 */
function hideInstallButton() {
  if (installButton) {
    installButton.classList.add('hidden');
    console.log('üôà Bot√£o de instala√ß√£o PWA escondido');
  }
}

/**
 * Mostra feedback quando a app √© instalada
 */
function showInstallFeedback() {
  // Criar notifica√ß√£o de instala√ß√£o bem-sucedida
  const notification = document.createElement('div');
  notification.className = 'install-success-notification';
  notification.innerHTML = `
    <div class="notification-content">
      <span class="material-symbols-outlined">check_circle</span>
      <span>Cit√¢nia instalada com sucesso!</span>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // Remover a notifica√ß√£o ap√≥s 3 segundos
  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 3000);
}

/**
 * Verifica se a PWA pode ser instalada
 * @returns {boolean} True se a instala√ß√£o for poss√≠vel
 */
export function canInstallPWA() {
  return deferredPrompt !== null;
}

/**
 * For√ßa a exibi√ß√£o do prompt de instala√ß√£o (se dispon√≠vel)
 */
export function triggerInstallPrompt() {
  if (installButton && !installButton.classList.contains('hidden')) {
    handleInstallClick();
  }
}