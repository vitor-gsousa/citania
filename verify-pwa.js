#!/usr/bin/env node

/**
 * Script de verifica√ß√£o PWA para Cit√¢nia
 * Verifica se todos os requisitos PWA est√£o cumpridos
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configura√ß√£o PWA da Cit√¢nia...\n');

// 1. Verificar manifest.json
console.log('üì± Verificando manifest.json...');
try {
    const manifestPath = path.join(__dirname, 'manifest.json');
    const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
    
    const requiredFields = ['name', 'short_name', 'start_url', 'display', 'theme_color', 'background_color', 'icons'];
    const missingFields = requiredFields.filter(field => !manifest[field]);
    
    if (missingFields.length === 0) {
        console.log('‚úÖ Manifest.json v√°lido com todos os campos obrigat√≥rios');
        
        // Verificar √≠cones
        if (manifest.icons && manifest.icons.length >= 2) {
            console.log(`‚úÖ ${manifest.icons.length} √≠cones definidos no manifest`);
            
            // Verificar se os ficheiros de √≠cones existem
            let iconsExist = true;
            manifest.icons.forEach(icon => {
                const iconPath = path.join(__dirname, icon.src);
                if (!fs.existsSync(iconPath)) {
                    console.log(`‚ùå √çcone n√£o encontrado: ${icon.src}`);
                    iconsExist = false;
                } else {
                    console.log(`‚úÖ √çcone encontrado: ${icon.src} (${icon.sizes})`);
                }
            });
            
            if (iconsExist) {
                console.log('‚úÖ Todos os √≠cones est√£o presentes');
            }
        } else {
            console.log('‚ö†Ô∏è Poucos √≠cones definidos (recomendado: pelo menos 192x192 e 512x512)');
        }
    } else {
        console.log(`‚ùå Campos em falta no manifest: ${missingFields.join(', ')}`);
    }
} catch (error) {
    console.log(`‚ùå Erro ao verificar manifest.json: ${error.message}`);
}

console.log();

// 2. Verificar Service Worker
console.log('‚öôÔ∏è Verificando Service Worker...');
try {
    const swPath = path.join(__dirname, 'sw.js');
    if (fs.existsSync(swPath)) {
        const swContent = fs.readFileSync(swPath, 'utf8');
        
        if (swContent.includes('addEventListener("install"') && 
            swContent.includes('addEventListener("fetch"')) {
            console.log('‚úÖ Service Worker com eventos install e fetch');
        } else {
            console.log('‚ö†Ô∏è Service Worker pode estar incompleto');
        }
        
        if (swContent.includes('cache')) {
            console.log('‚úÖ Service Worker implementa caching');
        }
    } else {
        console.log('‚ùå Service Worker (sw.js) n√£o encontrado');
    }
} catch (error) {
    console.log(`‚ùå Erro ao verificar Service Worker: ${error.message}`);
}

console.log();

// 3. Verificar funcionalidade de instala√ß√£o
console.log('üì≤ Verificando funcionalidade de instala√ß√£o...');
try {
    const installPath = path.join(__dirname, 'js', 'features', 'pwa-install.js');
    if (fs.existsSync(installPath)) {
        const installContent = fs.readFileSync(installPath, 'utf8');
        
        if (installContent.includes('beforeinstallprompt')) {
            console.log('‚úÖ Handler beforeinstallprompt implementado');
        }
        
        if (installContent.includes('appinstalled')) {
            console.log('‚úÖ Handler appinstalled implementado');
        }
        
        if (installContent.includes('deferredPrompt')) {
            console.log('‚úÖ Prompt de instala√ß√£o pode ser diferido');
        }
    } else {
        console.log('‚ùå M√≥dulo pwa-install.js n√£o encontrado');
    }
} catch (error) {
    console.log(`‚ùå Erro ao verificar funcionalidade de instala√ß√£o: ${error.message}`);
}

console.log();

// 4. Verificar integra√ß√£o no app principal
console.log('üîó Verificando integra√ß√£o...');
try {
    const appPath = path.join(__dirname, 'js', 'app.js');
    if (fs.existsSync(appPath)) {
        const appContent = fs.readFileSync(appPath, 'utf8');
        
        if (appContent.includes('initPWAInstall')) {
            console.log('‚úÖ M√≥dulo PWA est√° integrado no app principal');
        } else {
            console.log('‚ö†Ô∏è M√≥dulo PWA pode n√£o estar integrado');
        }
        
        if (appContent.includes('serviceWorker')) {
            console.log('‚úÖ Service Worker est√° registado');
        }
    }
} catch (error) {
    console.log(`‚ùå Erro ao verificar integra√ß√£o: ${error.message}`);
}

console.log();

// 5. Verificar estilos CSS
console.log('üé® Verificando estilos PWA...');
try {
    const cssPath = path.join(__dirname, 'css', 'style.css');
    if (fs.existsSync(cssPath)) {
        const cssContent = fs.readFileSync(cssPath, 'utf8');
        
        if (cssContent.includes('#pwa-install-button')) {
            console.log('‚úÖ Estilos do bot√£o de instala√ß√£o definidos');
        } else {
            console.log('‚ö†Ô∏è Estilos do bot√£o de instala√ß√£o podem estar em falta');
        }
        
        if (cssContent.includes('.install-success-notification')) {
            console.log('‚úÖ Estilos de notifica√ß√£o de instala√ß√£o definidos');
        }
    }
} catch (error) {
    console.log(`‚ùå Erro ao verificar estilos: ${error.message}`);
}

console.log();
console.log('üéØ Resumo:');
console.log('Para que a PWA funcione corretamente:');
console.log('1. ‚úÖ Deve ter manifest.json v√°lido');
console.log('2. ‚úÖ Deve ter Service Worker funcional');
console.log('3. ‚úÖ Deve ser servida via HTTPS (autom√°tico no Vercel)');
console.log('4. ‚úÖ Deve ter handler beforeinstallprompt');
console.log('5. ‚úÖ Deve ter √≠cones em diferentes tamanhos');
console.log();
console.log('üí° Para testar localmente:');
console.log('   npx http-server -p 8080 --ssl');
console.log('   Ou usar o Visual Studio Code Live Server');
console.log();
console.log('üöÄ Para testar em produ√ß√£o:');
console.log('   Aceda a https://citania.vercel.app em Chrome/Edge m√≥vel');
console.log('   O prompt de instala√ß√£o deve aparecer automaticamente');